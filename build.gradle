import com.github.rjeschke.txtmark.*
import org.apache.tools.ant.filters.*


apply plugin : 'groovy'
apply plugin:  "maven"

apply from: 'conf.gradle'
apply from: 'versions.gradle'


if (hasProperty('pub')) {
    File confFile = new File(pub)
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${pub} found.")
    } else {
      System.err.println "Publish from configuration in  " + pub
        apply from: pub
    }

} else {
    File confFile = new File("pub.gradle")
    if (! confFile.exists()) {
        throw new Exception("No publication configuration file ${confFile} found\
.")
    } else {
        apply from: "pub.gradle"
    }
}


group = "edu.holycross.shot"
version = '1.3.0'


buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'com.github.rjeschke', name: 'txtmark', version: '0.11'
  }
}




repositories {
    mavenCentral()
}

dependencies {
  compile  group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyVersion
  compile group: "com.ibm.icu", name: "icu4j", version: ucIteratorVersion


  testCompile 'junit:junit:4.11'
  testCompile 'org.concordion:concordion:1.4.4'
}


uploadArchives {
    repositories.mavenDeployer {
	repository(url: nexusRepo) {
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}

uploadArchives.doFirst {
  System.err.println "Uploading from config in " + pub
  System.err.println "repo " + nexusRepo
  System.err.println "username " + nexusUser
  System.err.println "pass " + nexusPassword

}


// for specs with concordion:
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    test {
        java {
	  srcDir "specs/java"
        }
        resources {
	  srcDir "${buildDir}/specs"
        }
    }
}

task cpResources(type: Copy) {
  from "specs/resources"
  into "${buildDir}/specs"
}

task setUpResources(dependsOn: [cpResources]) {
}
setUpResources.doLast {
  FileTree tree = fileTree(mdSrc) {
    include "**/*.md"
  }
  tree.visit { f ->
    if (f.relativePath.isFile()) {
      File inFile = new File("${mdSrc}/${f.relativePath}")
      def segs = f.relativePath.getSegments()
      String treePath = "${buildDir}/specs"
      Integer limit =  segs.size() - 1
      segs.eachWithIndex { s, i ->
	if (i < limit) {
	  treePath = "${treePath}/${s}"
	  File nxtDir = new File(treePath)
	  if (! nxtDir.exists()) {
	    nxtDir.mkdir()
	  }
	}
      }
      File outDir = new File(treePath)
      String htmlFileName = f.relativePath.getLastName().replaceFirst(/.md$/,".html")
      File htmlFile = new File(outDir, htmlFileName)

      String body = Processor.process(inFile.getText("UTF-8"),Configuration.DEFAULT)
      htmlFile.setText("${htmlPreface}${body}${htmlEnd}", "UTF-8")
    }
  }
}


test.dependsOn setUpResources
test {
    systemProperties 'concordion.output.dir': file("${buildDir}/concordion-results")

}

task mapVersion() {
}
mapVersion.doLast {
  tokenMap["version"] = version
}

task conc(type: Copy, dependsOn: [test, mapVersion]) {
//task conc(type: Copy) {
  from "${buildDir}/concordion-results"
  into "${buildDir}/concordion-formatted"
  filter(ReplaceTokens, tokens: tokenMap)
}
